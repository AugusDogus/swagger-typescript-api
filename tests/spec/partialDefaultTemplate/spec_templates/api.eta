<%
const { apiConfig, routes, utils, config } = it;
const { info, servers } = apiConfig;
const { _, require, formatDescription } = utils;

const server = (servers && servers[0]) || { url: "" };

const descriptionLines = _.compact([
  `@title ${info.title || "No title"}`,
  info.version && `@version ${info.version}`,
  server.url && `@baseUrl ${server.url}`,
  info.description && _.replace(formatDescription(info.description), /\n/g, "\n * "),
]);

%>
/** PARTIAL TEMPLATES */
<% if (descriptionLines.length) { %>
/**
<% descriptionLines.forEach((descriptionLine) => { %>
* <%~ descriptionLine %>

<% }) %>
*/
<% } %>
export class Api<SecurityDataType extends unknown><% if (!config.singleHttpClient) { %> extends HttpClient<SecurityDataType> <% } %> {

<% if(config.singleHttpClient) { %>
  constructor (private http: HttpClient<SecurityDataType>) {}
<% } %>


<% if (routes.outOfModule) { %>
 <% for await (const route of routes.outOfModule) { %>

  <%~ await includeFile('./procedure-call.ejs', { ...it, route }) %>

 <% } %>
<% } %>

<% if (routes.combined) { %>
  <% for await (const { routes: combinedRoutes = [], moduleName } of routes.combined) { %>
    <%~ moduleName %> = {
    <% for await (const route of combinedRoutes) { %>

    <%~ await includeFile('./procedure-call.ejs', { ...it, route }) %>

    <% } %>
    }
  <% } %>
<% } %>
}
